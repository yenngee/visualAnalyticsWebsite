---
title: 'MC1: Primary vs Derivative Sources'
author: 'Ng Yen Ngee'
date: '2021-07-22'
lastmod: '2021-07-25'
slug: []
cover: "/img/p_vs_s.png"
categories: []
tags: ['MITB', "MC1", 'Text Analytics']
output:
  blogdown::html_page: 
    toc: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.retina = 3, 
                      echo=TRUE,
                      eval=TRUE,
                      message = FALSE,
                      warning = FALSE)
```


# Introduction 
In this post, I will be running through the thought process of answering Q1 of [Vast Challenge MC1](https://vast-challenge.github.io/2021/MC1.html):  
Which are primary sources and which are derivative sources? What are the relationships between the primary and derivative sources? 

The final analysis done can be found [here](https://yenngee-dataviz.netlify.app/post/2021-07-16-mc1-findings/). 

## Preperation 
### Load Packages 
These are the packages used for this post. 
```{r load package}
library(tidyverse)
library(tidytext)
library(stringr)
library(gridExtra)
library(lubridate)
```


### Load Data 
The data has been previously loaded, cleaned and transformed into a neat tibble dataframe here. 
We load the cleaned data directly below: 

```{r load_clean_text}
cleaned_text <- read_rds("data/news_article_clean.rds")
cleaned_text <- cleaned_text %>%
  mutate(title = tolower(title))
glimpse(cleaned_text)
```

## Primary Sources VS Derivative sources
### What are they? 
According to the [research guide from the SMU Library](https://guides.smu.edu/primarysources#:~:text=Primary%20sources%20are%20original%2C%20first%2Dhand%20testimony.&text=These%20sources%20help%20depict%20what,statistical%20data%2C%20artifacts%20or%20treaties) as well as many other resources found from good old trusty Google: 

> A **primary source** is "first-hand" information, sources as close as possible to the origin of the information or idea under study. Often these sources are created at the time when the events or conditions are occurring, but primary sources can also include autobiographies, memoirs, and oral histories recorded later.

Hence, for our cases, we can classify blogs as primary sources, or any text that contains 'time' information because it implies that it is updated 'live' as a first person account. 

On the other hand: 

> Secondary sources (**Derivative sources**) works that provide analysis, commentary, or criticism on the primary source.

Now it becomes a little bit more tricky. Our data mainly consists on news articles and news articles can be considered as both primary and secondary sources. 

There's an interesting article online by the [Hartness Library](https://hartness.vsc.edu/find/articles/newspapers/primary-sources/) that explains pretty clearly what to consider when trying to decide if the news article is a primary or derivative source. We will be using some of the guidelines to help us figure this out as well. 

### Confirm plus Chope Primary sources: blogs/live updates 
We are certain that texts that are part of live blogs. So the first step is to identify if time is in the article text. We use `str_detect` from `stringr` package to do this. 
From a visual inspection on the cleaned data, we can find two formats of time: 

```{r str_detect_time}
str_detect("2359 random text hahaha", "^[0-2][0-9][0-5][0-9]") #time starts the article 
str_detect("more random text 6:30 AM hahaha", "[0-1]?[0-9]:[0-5]{1}[0-9]{1} [AP]M") # is in the format 6:30 AM 
```

#### 1) Identifying Primary/Derivative if 'time' is in the article

We observe that articles that have a time stamp at the start of the article looks a lot like a blog post. We also observe that if the title contains the word blog, they are also considered primary sources. Let's apply this to get a definition of whether a particular article is primary or derivative. 

```{r str_detect_df}
## identify dates 
has_timestamps <- str_detect(cleaned_text$text, "^[0-2][0-9][0-5][0-9]") | str_detect(cleaned_text$text, "[0-1]?[0-9]:[0-5]{1}[0-9]{1} [AP]M")
cleaned_text$primary_type <- if_else(has_timestamps, "blog post", NULL)
cleaned_text$is_primary <- if_else(has_timestamps, "primary", "derivative")

## identify 
is_blog_post <- str_detect(cleaned_text$title,"\\bblog\\b")
cleaned_text$primary_type <- if_else(is_blog_post, "blog post", cleaned_text$primary_type)
cleaned_text$is_primary <- if_else(is_blog_post, "primary", cleaned_text$is_primary)
```

#### 2) Visualize type of articles per source_type

**Step 1**: Not all of the news article source has both primary and derivative sources. Hence, we first create the complete data frame with all of the cleaned <br>
**Step 2**: We then create `source_type_per_article` which is dataframe that counts the number of articles of type primary or derivative for each newspaper source.  <br>
**Step 3**: Unfortunately, for our visualization to be pretty, we'll need to sort it. I want to sort it by the percentile of primary articles out of the total number of articles each news source has. So this steps create `source_type_per_article_perc`.  <br>
**Step 4**: we do a `left_join`, and `fct_order` by the primary_perc to get the final data frame. 


```{r source_type_per_article}
# Step 1 
full_source_type_per_article <- expand_grid(source = unique(cleaned_text$source), 
                                             is_primary = c('primary', 'derivative')) 

# Step 2
source_type_per_article <- cleaned_text %>%
  group_by(source, is_primary) %>%
  summarize(n = n()) %>% 
  ungroup() %>%
  right_join(full_source_type_per_article, by = c('source', 'is_primary')) %>%
  arrange(desc(n))

# Step 3 
source_type_per_article_perc <- source_type_per_article %>% 
  pivot_wider(names_from= is_primary, values_from=n) %>%
  replace_na(list(derivative=0L, primary=0L)) %>%
  mutate(primary_perc = primary/(derivative + primary), 
         source = as.character(source)) %>%
  select(source, primary_perc)

# Step 4 
source_type_per_article <- source_type_per_article %>%
  left_join(source_type_per_article_perc) %>%
  mutate(source = fct_reorder(source, primary_perc))

source_type_per_article

```

Let us visualize this with a pyramid plot style. We will be using the same code for the later sections as we try to decifer with more conditions which articles are the primary and derivative sources. 

**Pyramid plot style**

```{r plot_pyramid}
plot_derivative <- source_type_per_article %>% 
  filter(is_primary == "derivative") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity', fill="#0072B2") +
  scale_y_continuous('') + 
  ylim(0,120)+
  theme(legend.position = 'none',
        axis.title.y = element_blank(),
        plot.title = element_text(size = 11.5, hjust = 0.5),
        plot.margin=unit(c(0.1,0.2,0.1,-.1),"cm"),
        axis.ticks.y = element_blank(), 
        axis.text.y = element_text(hjust = 0.5)) + 
  ggtitle("Derivative") + 
  coord_flip() 
  
plot_primary <- source_type_per_article %>% 
  filter(is_primary == "primary") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity', fill="#D55E00") +
  scale_y_continuous(trans = 'reverse', limits=c(120,0))+ 
  theme(legend.position = 'none',
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(), 
        plot.title = element_text(size = 11.5, hjust = 0.5),
        plot.margin=unit(c(0.1,0,0.1,0.05),"cm")) + 
  ggtitle("Primary") +
  coord_flip()

plot_sources <- source_type_per_article %>% 
  filter(is_primary == "derivative") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity')+
  geom_text(aes(y=0, label=source))+ 
  coord_flip()

grid.arrange(plot_primary, plot_derivative, 
             widths=c(0.4,0.6),
             ncol=2
)
``` 

**Percentile bar plot style**

```{r plot_perc_bar}

source_type_per_article %>%
  ggplot(aes(fill=is_primary, y=n, x=source)) +
  geom_bar(position="fill", stat="identity") +
  coord_flip()

```

### It's all about speed.

During exploration of data, we found that some of the titles where duplicated. This means that some articles were posted 'after' others in different sources. The assumption is that the article that posts first, is considered a primary source, while the article that posts second is then considered the derivative source. 

Some of the articles have the same title because they are part of a group of posts, e.g. "voices - a blog about what is important to the people" where all the articles are in this same category but not necessary the same 'article'. Some of the articles are posted on the same date despite the same title, unfortunately, we are unable to tell them apart then. 

Hence, we identify such duplicates with the following conditions: 

* title repeated more than once 
* more than 1 number of distinct sources with the same title
* more than 1 number of distinct published dates with the same title 

```{r duplicated}
article_titles_dup <- cleaned_text %>%
  group_by(title) %>%
  add_count(source) %>% 
  summarize(n_distinct_source = n_distinct(source), 
            n_distinct_date = n_distinct(published_date), 
            min_date = min(published_date),
            n = n()) %>%
  ungroup() %>%
  filter(n>1 & n_distinct_source>1 & n_distinct_date > 1) %>%
  arrange(desc(n))

article_titles_dup
```

From there we are able to visualize the number of articles which lagged 0,1 or >=2 days from the first article appearance. 

```{r dup_aritcles_by_sources}
dup_articles <- cleaned_text %>%
  filter(title %in% unique(article_titles_dup$title)) %>%
  arrange(desc(title), desc(source)) %>%
  left_join(article_titles_dup %>% select(title, min_date)) %>%
  drop_na(published_date, min_date) %>%
  mutate(days_lagged = published_date - min_date) %>%
  mutate(days_lagged = ifelse(days_lagged >=2, '>=2 days', paste(days_lagged, 'day'))) 

dup_articles_by_sources <- dup_articles %>%
  group_by(source, days_lagged) %>%
  summarize(n = n()) %>%
  ungroup() %>% 
  arrange(desc(days_lagged)) 
dup_articles_by_sources

dup_articles_by_sources %>%
  mutate(days_lagged = factor(days_lagged, levels = c('0 day', '1 day', '>=2 days')), 
         source = fct_reorder(source,n)) %>%
  # pivot_wider(names_from = days_lagged, values_from = n) %>%
  # replace_na(list('>=_2_days' = 0L, '0_day' = 0L, '1_day' = 0L)) %>%
  ggplot(aes(x=source, y = n, fill = days_lagged)) +
  geom_bar(stat = 'identity') + 
  coord_flip() + 
  facet_wrap(~days_lagged)
``` 

Let's visualize it. 

```{r, fig.height=12}
dup_articles %>%
  mutate(date_day = day(published_date), 
         title = fct_reorder(title, date_day) ) %>%
  ggplot(aes(x=date_day, y=title)) +
  geom_line(size=2) 
```


This is adds on to the number of primary articles that we can identify. We create new is_primary columns to track. 

* is_primary1 : original is_primary column
* is_primary2 : status derived from the duplicated article titles and their dates 
* is_primary  : if is_primary2 = 'primary', then 'primary. else is_primary_1

```{r add_primary}
cleaned_text <- cleaned_text %>% 
  left_join(dup_articles %>% select(article_id, days_lagged)) %>%
  mutate(is_primary2 = ifelse( days_lagged == "0 day", "primary", "derivative"), 
         is_primary1 = is_primary, 
         primary_type = if_else(days_lagged == "0 day" & !is_primary == 'primary', 'first post', primary_type)) %>%
  replace_na(list(is_primary2 = 'unknown')) %>% 
  mutate(is_primary = ifelse(is_primary2 == "primary", "primary", is_primary1))

cleaned_text
```

```{r source_type_per_article2 }
# Step 2
source_type_per_article <- cleaned_text %>%
  group_by(source, is_primary) %>%
  summarize(n = n()) %>% 
  ungroup() %>%
  right_join(full_source_type_per_article, by = c('source', 'is_primary')) %>%
  arrange(desc(n))

# Step 3 
source_type_per_article_perc <- source_type_per_article %>% 
  pivot_wider(names_from= is_primary, values_from=n) %>%
  replace_na(list(derivative=0L, primary=0L)) %>%
  mutate(primary_perc = primary/(derivative + primary), 
         source = as.character(source)) %>%
  select(source, primary_perc)

# Step 4 
source_type_per_article <- source_type_per_article %>%
  left_join(source_type_per_article_perc) %>%
  mutate(source = fct_reorder(source, primary_perc))
```


**Pyramid plot style**

```{r plot_pyramid2, echo=FALSE}
plot_derivative <- source_type_per_article %>% 
  filter(is_primary == "derivative") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity', fill="#0072B2") +
  scale_y_continuous('') + 
  ylim(0,120)+
  theme(legend.position = 'none',
        axis.title.y = element_blank(),
        plot.title = element_text(size = 11.5, hjust = 0.5),
        plot.margin=unit(c(0.1,0.2,0.1,-.1),"cm"),
        axis.ticks.y = element_blank(), 
        axis.text.y = element_text(hjust = 0.5)) + #theme_bw()$axis.text.y,
  ggtitle("Derivative") + 
  coord_flip() 
  
plot_primary <- source_type_per_article %>% 
  filter(is_primary == "primary") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity', fill="#D55E00") +
  # ylim(0,120)+
  scale_y_continuous(trans = 'reverse', limits=c(120,0))+ 
  theme(legend.position = 'none',
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(), 
        plot.title = element_text(size = 11.5, hjust = 0.5),
        plot.margin=unit(c(0.1,0,0.1,0.05),"cm")) + 
  ggtitle("Primary") +
  coord_flip()

plot_sources <- source_type_per_article %>% 
  filter(is_primary == "derivative") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity')+
  geom_text(aes(y=0, label=source))+ 
  coord_flip()

grid.arrange(plot_primary, plot_derivative, 
             widths=c(0.4,0.6),
             ncol=2
)
``` 

**Percentile bar plot style**

```{r plot_perc_bar2, echo=FALSE}
source_type_per_article %>%
  ggplot(aes(fill=is_primary, y=n, x=source)) +
  geom_bar(position="fill", stat="identity") +
  coord_flip()

```

### The Events We Know 

There are certain known events that occur at a specific date and time. Thus we know that articles that mention the event after the event date are considered derivative sources, while news article that reported the event on the day itself could be considered as primary sources.

Here are some of the known events from reading the articles or from literature review: 

* 18/08/1998 Juliana Vann died
* 19/6/2009 Elian Karel died in prison

#### 18/08/1998 Juliana Vann died 

The first source, by Homeland Illumination could be considered the primary source which has already been identified as primary source, we find that though this is the first article which mentioned that Julianna Vann died, it also included other information about the poisoning etc which makes it still a derivative source than a primary one. We will need to make this into a derivative source. 

```{r Juliana_vann_died}
mentioned_event <- str_detect(cleaned_text$text, "juliana")

# the first source would be 
articles_mentioned_event <- cleaned_text %>% 
  filter(mentioned_event == TRUE)%>%
  arrange(published_date) %>%
  select(article_id, source, published_date, is_primary, title, text) 

articles_mentioned_event

# check if there has been any articles that are already considered primary source which suggests more than 1 event: 
articles_mentioned_event %>% 
  count(is_primary)

## Exact text of the primary source 
articles_mentioned_event %>% 
  filter(row_number() == 1) %>% 
  pull(text)

cleaned_text <- cleaned_text %>%
  mutate(is_primary = ifelse(article_id == 'Homeland Illumination_293', 'derivative', is_primary), 
         primary_type = ifelse(article_id == 'Homeland Illumination_293', NA, primary_type)
         # primary_type = replace(primary_type, article_id == 'Homeland Illumination_293', NA)
         )
```

#### 19/6/2009 Elian Karel died in prison

There is no article that stated this event on the day itself. 

```{r elian_karel_died}
mentioned_event <- str_detect(cleaned_text$text, "elian karel") & str_detect(cleaned_text$text, "died") & !str_detect(cleaned_text$text, "juliana")

# the first source would be 
articles_mentioned_event <- cleaned_text %>% 
  filter(mentioned_event == TRUE & published_date >= "2009-06-19")%>%
  arrange(published_date) 

articles_mentioned_event


```

## Final cleaned text 

```{r }
cleaned_text <- cleaned_text %>%
  select(-is_primary1, -is_primary2)

write_rds(cleaned_text, "data/news_article_clean_primary_vs_derivative.rds")

glimpse(cleaned_text)

```

```{r source_type_per_article3 }
# Step 2
source_type_per_article <- cleaned_text %>%
  group_by(source, is_primary) %>%
  summarize(n = n()) %>% 
  ungroup() %>%
  right_join(full_source_type_per_article, by = c('source', 'is_primary')) %>%
  arrange(desc(n))

# Step 3 
source_type_per_article_perc <- source_type_per_article %>% 
  pivot_wider(names_from= is_primary, values_from=n) %>%
  replace_na(list(derivative=0L, primary=0L)) %>%
  mutate(primary_perc = primary/(derivative + primary), 
         source = as.character(source)) %>%
  select(source, primary_perc)

# Step 4 
source_type_per_article <- source_type_per_article %>%
  left_join(source_type_per_article_perc) %>%
  mutate(source = fct_reorder(source, primary_perc))
```


**Pyramid plot style**

```{r plot_pyramid3, echo=FALSE}
plot_derivative <- source_type_per_article %>% 
  filter(is_primary == "derivative") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity', fill="#0072B2") +
  scale_y_continuous('') + 
  ylim(0,120)+
  theme(legend.position = 'none',
        axis.title.y = element_blank(),
        plot.title = element_text(size = 11.5, hjust = 0.5),
        plot.margin=unit(c(0.1,0.2,0.1,-.1),"cm"),
        axis.ticks.y = element_blank(), 
        axis.text.y = element_text(hjust = 0.5)) + #theme_bw()$axis.text.y,
  ggtitle("Derivative") + 
  coord_flip() 
  
plot_primary <- source_type_per_article %>% 
  filter(is_primary == "primary") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity', fill="#D55E00") +
  # ylim(0,120)+
  scale_y_continuous(trans = 'reverse', limits=c(120,0))+ 
  theme(legend.position = 'none',
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(), 
        plot.title = element_text(size = 11.5, hjust = 0.5),
        plot.margin=unit(c(0.1,0,0.1,0.05),"cm")) + 
  ggtitle("Primary") +
  coord_flip()

plot_sources <- source_type_per_article %>% 
  filter(is_primary == "derivative") %>%
  ggplot(aes(x=source, y=n)) +
  geom_bar(stat='identity')+
  geom_text(aes(y=0, label=source))+ 
  coord_flip()

grid.arrange(plot_primary, plot_derivative, 
             widths=c(0.4,0.6),
             ncol=2
)
``` 

**Percentile bar plot style**

```{r plot_perc_bar3, echo=FALSE}
source_type_per_article %>%
  ggplot(aes(fill=is_primary, y=n, x=source)) +
  geom_bar(position="fill", stat="identity") +
  coord_flip()

```

